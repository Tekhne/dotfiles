snippet let
	let ${1:identifier} = ${2:expression};
snippet con
	const ${1:identifier}: ${2:type} = ${3:expression};
snippet fn
	fn ${1:identifier}(${2})${3} {
	}
snippet if
	if ${1:condition} {
	}
snippet els
	else {
	}
snippet eli
	else if ${1:condition} {
	}
snippet loo
	loop {
	}
snippet whi
	while ${1:condition} {
	}
snippet for
	for ${1:collection} in ${2:iterator} {
	}
snippet use
	use ${1:library};
snippet mat
	match ${1:value} {
	}
snippet arm
	${1:pattern} => ${2:statement}
snippet ifl
	if let ${1:pattern} = ${2:expression} {
	}
snippet str
	struct ${1:Identifier} {
	}
snippet main
	fn main() {
	}
snippet atto outer attribute
	#[${1:meta}]
snippet atti inner attribute
	#![${1:meta}]
snippet imp
	impl ${1:Identifier} {
	}
snippet enu
	enum ${1:Identifier} {
	}
snippet mod
	mod ${1:identifier} {
	}
snippet crate - link an external crate or a macro variable representing the crate in which the macro is defined
	// FIXME fix this snippet
snippet extern - link an external crate, function, or variable
	// FIXME fix this snippet
snippet trait - define a trait
	// FIXME fix this snippet
snippet type - define a type alias or associated type
	// FIXME fix this snippet
snippet unsafe - denote unsafe code, functions, traits, or implementations
	// FIXME fix this snippet
snippet where - denote clauses that constrain a type
	// FIXME fix this snippet
snippet use - bring symbols into scope
	// FIXME fix this snippet
