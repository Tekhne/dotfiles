snippet med
	@media (${1:min}-width: ${2}) {
	}
snippet i
	<i>${1}</i>
snippet doctype
	<!DOCTYPE HTML>
snippet a
	<a></a>
snippet abbr
	<abbr></abbr>
snippet address
	<address>
	</address>
snippet area
	<area />
snippet article
	<article>
	</article>
snippet aside
	<aside>
	</aside>
snippet asider supprting information for the main content
	<aside>
	</aside>
snippet audio
	<audio controls="controls" src="${1:http://www.example.com}">
	  Your software does not support this object.
	</audio>
snippet b
	<b></b>
snippet base
	<base />
snippet blockquote
	<blockquote>
	</blockquote>
snippet body
	<body>
	</body>
snippet br
	<br />
snippet button
	<button
	  autoFocus
	  disabled
	  name=""
	  type="button reset submit"
	>${1}</button>
snippet canvas
	<canvas>
	  Your software does not support this object.
	</canvas>
snippet caption
	<caption></caption>
snippet command
	<command>
	</command>
snippet datalist
	<datalist>
	</datalist>
snippet dd
	<dd></dd>
snippet details
	<details>
	</details>
snippet div
	<div>
	</div>
snippet dl
	<dl>
	</dl>
snippet dt
	<dt></dt>
snippet em
	<em></em>
snippet embed
	<embed />
snippet fieldset
	<fieldset>
	</fieldset>
snippet figcaption
	<figcaption></figcaption>
snippet figure
	<figure>
	</figure>
snippet footer
	<footer>
	</footer>
snippet footerc contains metadata that applies to the parent document
	<footer role="contentinfo">
	</footer>
snippet form
	<form>
	</form>
snippet h1
	<h1>${1}</h1>
snippet h2
	<h2></h2>
snippet h3
	<h3></h3>
snippet h4
	<h4></h4>
snippet h5
	<h5></h5>
snippet h6
	<h6></h6>
snippet head
	<head>
	</head>
snippet header
	<header>
	</header>
snippet headerr prime heading or internal title of the page
	<header role="banner">
	</header>
snippet hgroup
	<hgroup>
	</hgroup>
snippet hr
	<hr />
snippet html
	<html>
	</html>
snippet id
	id="${1:[id]}"
snippet iframe
	<iframe />
snippet img
	<img />
snippet input
	<input
	  accept=".doc,.pdf,audio/*,image/*,text/plain,video/*"
	  autoFocus
	  checked
	  disabled
	  inputMode="numeric tel email url"
	  max=""
	  maxLength=""
	  min=""
	  multiple
	  name=""
	  pattern="<regex>"
	  placeholder=""
	  readOnly
	  required
	  spellCheck
	  src="<image URI>"
	  step=""
	  type="button checkbox color date datetime-local email file hidden image month number password radio range reset search submit tel text time url week"
	  value=""
	  width=""
	/>
snippet keygen
	<keygen />
snippet label
	<label htmlFor="${1}">${2}</label>
snippet legend
	<legend></legend>
snippet li
	<li></li>
snippet link
	<link />
snippet map
	<map>
	</map>
snippet mark
	<mark></mark>
snippet menu
	<menu>
	</menu>
snippet meta charset
	<meta charset="${1:utf-8}" />
snippet meta description
	<meta name="description" content="${1}">
snippet meta http-equiv (generic)
	<meta http-equiv="${1}" content="${2}" />
snippet meta http-equiv for IE edge
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
snippet meta name
	<meta name="${1}" content="${2}" />
snippet meta viewport
	<meta name="viewport" content="initial-scale=1.0, width=device-width" />
snippet meter
	<meter></meter>
snippet nav
	<nav>
	</nav>
snippet noscript
	<noscript>
	</noscript>
snippet object
	<object>
	</object>
snippet ol
	<ol>
	</ol>
snippet optgroup
	<optgroup>
	</optgroup>
snippet option
	<option></option>
snippet output
	<output></output>
snippet p
	<p></p>
snippet param
	<param>
snippet picture
	<picture>
	  <source media="" srcSet="" />
	  <img alt="" src="" />
	</picture>
snippet pre
	<pre>
	</pre>
snippet progress
	<progress></progress>
snippet q
	<q></q>
snippet script inline statements
	<script>
	</script>
snippet script external source
	<script src="${1:http://www.example.com}"></script>
snippet section
	<section>
	</section>
snippet sectionr main content of the document
	<section>
	</section>
snippet select
	<select>
	</select>
snippet small
	<small></small>
snippet source
	<source />
snippet span
	<span></span>
snippet sty
	style="${1}"
snippet style
	<style>
	</style>
snippet sub
	<sub></sub>
snippet summary
	<summary></summary>
snippet sup
	<sup></sup>
snippet table
	<table>
	</table>
snippet tbody
	<tbody>
	</tbody>
snippet td
	<td></td>
snippet textarea
	<textarea>
	</textarea>
snippet tfoot
	<tfoot>
	</tfoot>
snippet th
	<th></th>
snippet thead
	<thead>
	</thead>
snippet time
	<time></time>
snippet title
	<title></title>
snippet tr
	<tr>
	</tr>
snippet ul
	<ul>
	</ul>
snippet video
	<video>
	  Your software does not support this object.
	</video>
snippet jsv
	javascript: void(0);
snippet main
	<main>
	</main>
snippet gat
	className=""
	id=""
	style=""
	tabIndex="0"
	title=""
snippet rir
	import * as React from 'react';
snippet rid
	import * as ReactDOM from 'react-dom';
snippet rf
	import * as React from 'react';
	
	export function ${1:name}() {
	  return <span>${2:$1}</span>;
	}
	
	export default ${3:$1};
snippet rc
	import * as React from 'react';
	
	export class ${1:Component} extends React.Component {
	  public render() {
	    return (
	      <span>${2:$1}</span>
	    );
	  }
	}
	
	export default ${3:$1};
snippet rpr
	// static methods
	// static propTypes = {};
	// static defaultProps = {};
	// static contextTypes = {};
	// static childContextTypes = {};
	// state = {};
	// instance variables
	// getChildContext() {}
	// componentWillMount() {}
	// componentDidMount() {}
	// componentWillReceiveProps(nextProps) {}
	// shouldComponentUpdate(nextProps, nextState) {}
	// componentWillUpdate(nextProps, nextState) {}
	// componentDidUpdate(prevProps, prevState) {}
	// componentWillUnmount() {}
	// render()
	// event handlers and callbacks (e.g. handleChange = () => {};)
	// getter methods for render (e.g. getContent())
	// render helper methods (e.g. renderNavigation())
snippet rtc
	import * as React from 'react';
	import * as ReactDOM from 'react-dom';
	import { ${1:Component} } from './${2:$1}';
	
	function buildProps(props = {}) {
	  return { ...props };
	}
	
	function buildComponent(props = {}) {
	  return <${3:$1} {...buildProps(props)} />;
	}
	
	it('renders successfully', () => {
	  ReactDOM.render(buildComponent(), document.createElement('div'));
	});
snippet rrc
	import { connect } from 'react-redux';
	import ${1:PresentationalComponent} from '../components/${2:$1}';
	
	export const mapStateToProps = (state, ownProps) => ({
	});
	
	export const mapDispatchToProps = (dispatch, ownProps) => ({
	});
	
	export const ${3:$1}Container = connect(
	  mapStateToProps,
	  mapDispatchToProps
	)(${4:$1});
	
	export default ${5:$1}Container;
snippet rtrc
	import { mapStateToProps, mapDispatchToProps } from './${1}';
	
	describe('mapStateToProps()', () => {
	  it.skip('returns an object mapped from state', () => {
	    const state = {
	    };
	    expect(mapStateToProps(state)).toEqual({
	    });
	  });
	});
	
	describe('mapDispatchToProps', () => {
	  describe('returned object mapped from dispatch', () => {
	  });
	});
snippet rrr
	export const initialState = {
	};
	
	export function ${1:reducer}(state = initialState, action) {
	  switch (action.type) {
	    default:
	      return state;
	  }
	}
	
	export default ${2:$1};
snippet rra
	export const actionTypes = {
	};
	
	export const actions = {
	};
snippet rtrr
	import {
	  initialState,
	  ${1:function}
	} from './${2:$1}';
	
	describe('${3:$1}()', () => {
	  describe('when action.type is unrecognized', () => {
	    it('returns previous state', () => {
	      const action = { type: 'UNRECOGNIZED' };
	      expect(${4:$1}(initialState, action)).toEqual(initialState);
	    });
	  });
	});
snippet rtra
	import { actions, actionTypes } from './${1}';
	import { isFSA } from 'flux-standard-action';
	
	describe('actions', () => {
	});
snippet rh
	export function with${1:Component}(WrappedComponent) {
	  function With${2:$1}(props) {
	    return <WrappedComponent {...props} />;
	  }
	
	  const wrappedComponentName = WrappedComponent.displayName
	    || WrappedComponent.name
	    || 'Component';
	
	  With${3:$1}.displayName = \`with${4:$1}(${wrappedComponentName})\`;
	  return With${5:$1};
	}
snippet rtesting
	// Test render() and other "public" methods for these things:
	// * Output - significant or variable rendered content
	// * Side-effects - simulated events, "child" interaction, prop
	//   function calls, lifecycle method effects, timers, etc.
	// * Error handling
	// * Boundary condition handling
	//
	// Avoid testing:
	// * Declarative code which would need to be duplicated in the test.
	// * Behavior of code outside this unit (frameworks, libraries, etc.).
